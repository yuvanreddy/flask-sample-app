name: Flask App CI/CD

on:
  push:
    branches:
      - "main"
      - "develop"
  pull_request:
    branches:
      - "main"

env:
  REGISTRY: docker.io
  IMAGE_NAME: dyuvraj/flask-sample-app
  DOCKER_BUILDKIT: 1

jobs:
  # Test the application
  test:
    name: Test Flask Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest tests/ -v --cov=app --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Build and push Docker image
  build-and-push:
    name: Build & Push to CloudSmith
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      image-version: ${{ steps.meta.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (temporary fallback)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            GIT_SHA=${{ github.sha }}
          provenance: false

  # Deploy to staging (develop branch)
  create-release:
    name: Create Octopus Release
    needs: [build-and-push, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Create Octopus Release
        uses: docker://octopusdeploy/octo
        with:
          args: >
            create-release
            --server="${{ secrets.OCTOPUS_SERVER_URL }}"
            --apiKey="${{ secrets.OCTOPUS_API_KEY }}"
            --space="Flask Sample App"
            --project="Flask Sample App"
            --version="${{ needs.build-and-push.outputs.image-version }}"
            --channel="${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
            --package="dyuvraj/flask-sample-app:${{ needs.build-and-push.outputs.image-version }}"

      - name: Deploy to Development
        if: github.ref == 'refs/heads/develop'
        uses: docker://octopusdeploy/octo
        with:
          args: >
            deploy-release
            --server="${{ secrets.OCTOPUS_SERVER_URL }}"
            --apiKey="${{ secrets.OCTOPUS_API_KEY }}"
            --space="Flask Sample App"
            --project="Flask Sample App"
            --releaseNumber="${{ needs.build-and-push.outputs.image-version }}"
            --environment="Development"
            --tenant="Development"

      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        uses: docker://octopusdeploy/octo
        with:
          args: >
            deploy-release
            --server="${{ secrets.OCTOPUS_SERVER_URL }}"
            --apiKey="${{ secrets.OCTOPUS_API_KEY }}"
            --space="Flask Sample App"
            --project="Flask Sample App"
            --releaseNumber="${{ needs.build-and-push.outputs.image-version }}"
            --environment="Production"
            --tenant="Production"

  # Notify on completion
  upload-artifacts:
    name: Upload Test Artifacts to S3
    needs: [test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload test results to S3
        run: |
          # Create artifact directory
          mkdir -p artifacts/test-results
          
          # Copy test artifacts (if any)
          cp -r htmlcov/ artifacts/test-results/ 2>/dev/null || true
          cp coverage.xml artifacts/test-results/ 2>/dev/null || true
          
          # Upload to S3
          aws s3 sync artifacts/ s3://flask-app-artifact/artifacts/${{ github.run_id }}/ \
            --delete \
            --cache-control max-age=3600
          
          # Create latest symlink
          aws s3 cp s3://flask-app-artifact/artifacts/${{ github.run_id }}/test-results/ s3://flask-app-artifact/latest/test-results/ --recursive

      - name: Create build summary
        run: |
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: flask-app-artifact" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts Prefix**: artifacts/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Prefix**: latest/test-results/" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Version**: ${{ needs.build-and-push.outputs.image-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Octopus Release**: Created for environment" >> $GITHUB_STEP_SUMMARY
